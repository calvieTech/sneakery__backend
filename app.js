require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const fs = require("fs");

const sneakersRoutes = require("./routes/sneakers-routes");
const usersRoutes = require("./routes/users-routes");
const HttpError = require("./models/http-error");
const mongoDB_API_Key = process.env.MONGODB_API;
const PORT = process.env.PORT;
const cors = require("cors");
const app = express();
const http = require("http");
const path = require("path");

// SSL setup
const https = require("https");

// SSL Option keys generated by certbot
// var sslOptions = {
// 	key: fs.readFileSync("/etc/letsencrypt/live/calvietech.com/privkey.pem"),
// 	cert: fs.readFileSync("/etc/letsencrypt/live/calvietech.com/fullchain.pem"),
// 	requestCert: false,
// 	rejectUnauthorized: false,
// };

app.use(cors());

app.use(bodyParser.json());

app.use("/uploads/avatars", express.static(path.join("uploads", "avatars")));
app.use("/uploads/sneakers", express.static(path.join("uploads", "sneakers")));

app.use((req, res, next) => {
	res.setHeader("Access-Control-Allow-Origin", "*");
	res.setHeader(
		"Access-Control-Allow-Headers",
		"Origin, X-Requested-With, Content-Type, Accept, Authorization"
	);
	res.setHeader("Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE");
	next();
});

app.use("/api/sneakers", sneakersRoutes); // => /api/sneakers...
app.use("/api/users", usersRoutes);

app.use((req, res, next) => {
	const error = new HttpError("Could not find this route.", 404);
	throw error;
});

app.use((error, req, res, next) => {
	console.log("ERROR RESPONSE: ", error);
	let avatar = path.join("./uploads", "/avatars");
	if (req.file) {
		fs.unlink(avatar, () => {
			console.log(error.message);
			// return next(error);
		});
	}
	if (res.headerSent) {
		return next(error);
	}
	res.status(typeof error.code === "number" ? error.code : 500);
	res.json({ message: error.message + " in app.js" || "An unknown error occurred! in app.js" });
});

// For HTTPS ONLY
// mongoose
// 	.connect(`${mongoDB_API_Key}`)
// 	.then(() => {
// 		const PORT = 3001;
// 		https.createServer(sslOptions, app).listen(PORT);
// 		console.log(`Listening on PORT ${PORT}`);
// 		console.log(`Connected to mongoDB`);
// 	})
// 	.catch((err) => {
// 		console.log(err);
// 	});

mongoose
	.connect(`${mongoDB_API_Key}`)
	.then(() => {
		console.log(`Connected to mongoDB`);
		app.listen(PORT);
		console.log(`Listening on ${PORT}`);
	})
	.catch((err) => {
		console.log(err);
	});
